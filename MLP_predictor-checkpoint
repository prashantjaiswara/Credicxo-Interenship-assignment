{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score,classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "import joblib\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "chemical_data=pd.read_csv('musk_csv.csv')\n",
    "#chemical_data\n",
    "\n",
    "X=chemical_data.drop(labels=['ID','molecule_name','conformation_name','class'],axis=1)\n",
    "#X\n",
    "\n",
    "Y=chemical_data['class']\n",
    "#Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_for_training, X_for_testing, Y_for_training, Y_for_testing = train_test_split(X,Y,test_size=0.2,random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "model=MLPClassifier(activation='logistic', solver='sgd',hidden_layer_sizes=(10,15),max_iter=1000, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MLPClassifier(activation='logistic', alpha=0.0001, batch_size='auto',\n",
       "              beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,\n",
       "              hidden_layer_sizes=(10, 15), learning_rate='constant',\n",
       "              learning_rate_init=0.001, max_iter=1000, momentum=0.9,\n",
       "              n_iter_no_change=10, nesterovs_momentum=True, power_t=0.5,\n",
       "              random_state=0, shuffle=True, solver='sgd', tol=0.0001,\n",
       "              validation_fraction=0.1, verbose=False, warm_start=False)"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X_for_training, Y_for_training)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_predicted=model.predict(X_for_testing)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98      1120\n",
      "           1       0.88      0.87      0.87       200\n",
      "\n",
      "    accuracy                           0.96      1320\n",
      "   macro avg       0.93      0.92      0.93      1320\n",
      "weighted avg       0.96      0.96      0.96      1320\n",
      "\n"
     ]
    }
   ],
   "source": [
    "str=classification_report(Y_for_testing, Y_predicted)\n",
    "file=open(\"Final Performace Measures.txt\",\"a\")\n",
    "file.write(str)\n",
    "file.close()\n",
    "\n",
    "print(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9621212121212122"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_accuracy_score=accuracy_score(Y_for_testing, Y_predicted)\n",
    "model_accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "loss_values = model.loss_curve_\n",
    "plt.plot(loss_values,'-b',label='train')\n",
    "plt.xlabel(\"n iteration\")\n",
    "plt.legend(loc='upper left')\n",
    "plt.title(\"loss with iteration\")\n",
    "\n",
    "plt.show()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['chemical_type_predictor_MLP.joblib']"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "joblib.dump(model,'chemical_type_predictor_MLP.joblib')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Output: [1 0]\n"
     ]
    }
   ],
   "source": [
    "retrived_model=joblib.load('chemical_type_predictor.joblib')\n",
    "\n",
    "input_data_1=[50,-196,-149,28,-117,-81,58,-4,-39,-119,-44,101,-51,-57,-72,-296,43,-82,129,-26,-6,-17,1,-54,-98,-14,29,-76,12,-147,-116,-103,-15,-227,-34,22,-167,36,-146,13,-178,-86,-72,-61,36,-108,-109,-64,90,-98,58,-17,-6,72,-51,-57,85,-142,-15,-165,-20,-195,31,-191,-11,48,-166,-58,-133,-74,-163,-150,-44,51,-61,-184,-17,-59,121,62,-1,14,67,-28,-180,35,-109,-105,29,-149,-202,-11,3,-119,16,-47,-77,40,-153,66,-199,20,-54,-52,-63,-120,-179,-84,-67,33,1,19,28,11,-150,-18,-92,55,86,14,-117,-67,-101,-62,-128,19,-145,-188,-116,-46,-15,-118,-50,41,-63,-49,74,-45,-45,-19,63,5,40,24,-178,-103,-118,-92,-103,29,-22,3,8,-170,-70,-196,-241,-254,-212,-119,-10,33,187,-70,-167,48]\n",
    "input_data_2=[114,61,-144,-77,-117,11,56,-165,-40,-22,-293,-113,-67,-275,-284,-303,52,-154,-98,-184,-29,-22,2,104,111,-34,48,-87,25,68,-114,157,-30,12,-128,211,-175,3,-128,39,-93,161,-27,-297,-244,-327,-98,-72,-107,-102,-73,-26,-12,-121,148,-93,93,-119,35,41,-101,178,21,-5,-146,179,-166,-84,-118,-55,-139,-82,-164,-193,-218,-182,1,-282,-105,-166,-20,13,-32,-39,1,23,-43,-167,-8,82,114,166,-115,-48,30,-55,-167,31,-156,80,-28,266,-257,-284,-292,-265,-167,-120,-245,-248,-232,2,-3,-3,-1,61,112,37,84,25,81,149,130,-108,96,6,41,56,14,-188,25,-138,-75,-127,-221,-93,53,-70,-18,-33,-27,5,49,17,-178,-102,-119,-57,-52,53,-62,-122,-113,83,180,151,-239,-81,-137,34,254,290,143,-58,-117,60]\n",
    "\n",
    "Y_predicted=retrived_model.predict( [input_data_1, input_data_2])\n",
    "print(\"Output:\",Y_predicted)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
